<?php

/*
 * @file
 * Menu hooks and other functions for instagram_hashtag module
 */


/*
 * Implementation of hook_menu().
 */

function instagram_hashtag_menu() {
  $items = array();

  $items['admin/config/services/instagram_hashtag'] = array(
    'title' => 'Instagram Hashtags settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instagram_hashtag_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function instagram_hashtag_form() {
  $form = array();

  $form['drupagram_save_all_tags'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save all tags'),
    '#description' => t('When saving an Instagram image, we\'ll save all tags for that image, or just the one we\'re using to search?'),
    '#default_value' => variable_get('drupagram_save_all_tags', FALSE),
  );

  return system_settings_form($form);
}


function get_hashtags() {
  $instances = field_info_instances();
  $instagram_fields = array();
  $hashtags  = array();
  foreach ($instances as $entity_type => $entity) {
    foreach ($entity as $bundle_name => $bundle){
      if (is_array($bundle) && count($bundle) > 0) {
        foreach ($bundle as $field_name => $field_info) {
          $field = field_info_field($field_name);
          if ($field['type'] == 'instagram_hashtag') {
            $instagram_fields[$entity_type][$bundle_name][$field_name] = $field_name;

            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', $entity_type)
              ->entityCondition('bundle', $bundle_name)
              ->propertyCondition('status', 1)
              ->fieldCondition($field_name, 'hashtag', 'NULL', '!=')
              ->addMetaData('account', user_load(1)); // Run the query as user 1.
            $result = $query->execute();
            if (is_array($result) && count($result) > 0) {
              foreach($result as $result_entity_type => $array_ids) {
                $ids = array_keys($array_ids);
                $items = entity_load($entity_type, $ids);
                if (is_array($items) && count($items) > 0) {
                  foreach ($items as $item) {
                    $hashtag_items = field_get_items($entity_type, $item, $field_name);
                    if (is_array($hashtag_items) && count($hashtag_items) > 0) {
                      foreach ($hashtag_items as $hashtag_delta => $hashtag) {
                        $hashtag_value = strtolower($hashtag['hashtag']);
                        $hashtags[$hashtag_value] = $hashtag_value;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return $hashtags;
}


function instagram_hashtag_cron() {
  instagram_hashtag_fetch_feed();
}

function instagram_hashtag_fetch_feed() {
  
  $hashtags = get_hashtags();

  if (is_array($hashtags) && count($hashtags) > 0) {
    $params = array();
    //@fixme: I don't like this
    $result = db_select('drupagram_account', 'insta')
      ->fields('insta',array('drupagram_id'))
      ->condition('import', 1)
      ->orderBy('last_refresh')
      ->execute()
      ->fetchAssoc();

    $id = $result['drupagram_id'];

    $account = drupagram_account_load($id);

    $drupagram = drupagram_connect($account);

    foreach ($hashtags as $hashtag) {
      $result = $drupagram->tags_recent($hashtag, $params, TRUE);
      if ($result) {
        module_load_include('inc', 'drupagram');
        foreach ($result as $media) {
          drupagram_media_save($media);
          // Do we need to save all tags this photo has,
          // or just the one we're using for searching?
          $hashtag_parameter = variable_get('drupagram_save_all_tags', FALSE) ? '' : $hashtag;
          drupagram_media_tags_save($media, $hashtag_parameter);
        }
      }
      else {
        return 'No results';
      }
    }
  }
}

/**
 * Implements hook_variable_info().
 */
function instagram_hashtag_variable_info($options) {
  $variables = array();

  $variable['drupagram_save_all_tags'] = array(
    'title' => t('Drupagram: Save all tags'),
  );

  return $variable;

}


/**
 * Implements hook_views_api()
 */

function instagram_hashtag_views_api() {
  return (array(
    'api' => 3,
    'path' => drupal_get_path('module', 'instagram_hashtag'),
  ));
}

function instagram_hashtag_remove_emoji($text) {

  // Ensure we don't let MB characters go into MySQL because that will ruin the query.
  // @see https://drupal.org/comment/7917993#comment-7917993
  $text = preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text);


  return $text;
}

function instagram_hashtag_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'instagram_hashtag' => array(
      'label' => t('Instagram Hashtag'),
      'description' => t('Instagram Hashtag to fetch photos.'),
      'default_widget' => 'instagram_hashtag_text',
      'default_formatter' => 'instagram_hashtag_gallery',
    ),
  );
}


function instagram_hashtag_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
//    if (!empty($item['rgb'])) {
//      if (! preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => 'field_example_invalid',
//          'message' => t('Color must be in the HTML format #abcdef.'),
//        );
//      }
//    }
  }
}


function instagram_hashtag_field_is_empty($item, $field) {
  return empty($item['hashtag']);
}

function instagram_hashtag_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'instagram_hashtag_gallery' => array(
      'label' => t('Gallery'),
      'field types' => array('instagram_hashtag'),
    ),
  );
}


function instagram_hashtag_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'instagram_hashtag_gallery':
      foreach ($items as $delta => $item) {
        $hashtag = strtolower($item['hashtag']);
        $result = db_select('instagram_hashtag', 'ih')
          ->fields('ih')
          ->condition('media_hashtag', $hashtag)
          ->range(0,10)
          ->execute()
          ->fetchAllAssoc('id');

        $output_array = array();

        foreach ($result as $photo) {
          $output_array[] = theme('image', array('path' => $photo->media_thumbnail));
        }



        $element[$delta] = array(
          // We create a render array to produce the desired markup,
          // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
          // See theme_html_tag().
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => theme('item_list', array('items' => $output_array)),
        );
      }
      break;
  }

  return $element;
}


function instagram_hashtag_field_widget_info() {
  return array(
    'instagram_hashtag_text' => array(
      'label' => t('Instagram Hashtag'),
      'field types' => array('instagram_hashtag'),
    ),
  );
}

function instagram_hashtag_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['hashtag']) ? $items[$delta]['hashtag'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'instagram_hashtag_text':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
      );
      break;
  }

  $element['hashtag'] = $widget;
  return $element;
}
